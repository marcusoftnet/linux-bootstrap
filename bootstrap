#!/usr/bin/env bash

################################################################################
# bootstrap
#
# This script is intended to set up a new Linux desktop machine with my dotfiles
# and other development preferences.
#
# I have adjusted it to my needs using https://github.com/joshukraine/linux-bootstrap
# as a great starting point
# ################################################################################


# Thank you, thoughtbot! :)
bootstrap_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n[BOOTSTRAP] $fmt\n" "$@"
}


################################################################################
# Variable declarations
################################################################################

osname=$(uname)
OLD_DOTFILES_BACKUP=$HOME/old_dotfiles_backup

DOTFILES_REPO_URL="https://github.com/marcusoftnet/linux-dotfiles.git"
DOTFILES_BRANCH="main"
DOTFILES_DIR=$HOME/dotfiles

BOOTSTRAP_REPO_URL="https://github.com/marcusoftnet/linux-bootstrap.git"
BOOTSTRAP_BRANCH="main"
BOOTSTRAP_DIR=$HOME/linux-bootstrap


################################################################################
# Make sure we're on Linux before continuing
################################################################################

if [[ "$osname" == 'Darwin' ]]; then
  bootstrap_echo "Oops, looks like you're on a Mac. Please check out the link
below for instructions on setting up macOS."
  bootstrap_echo "http://jsua.co/macos"
  exit 1
elif [[ "$osname" != 'Linux' ]]; then
  bootstrap_echo "Oops, it looks like you're using a non-supported OS. Exiting..."
  exit 1
fi


################################################################################
# Update the system.
################################################################################

bootstrap_echo "Step 1: Updating system packages ..."

if command -v aptitude >/dev/null; then
  bootstrap_echo "Using aptitude ..."
else
  bootstrap_echo "Installing aptitude ..."
  sudo apt-get install -y aptitude
fi

sudo aptitude update
sudo aptitude -y upgrade


################################################################################
# Install basic tools
################################################################################

bootstrap_echo "Step 2: Installing basic tools..."

bootstrap_echo "Installing build-essential..."
sudo aptitude install -y build-essential

bootstrap_echo "Installing curl ..."
sudo aptitude install -y curl

bootstrap_echo "Installing jq ..."
sudo apt install -y jq

bootstrap_echo "Installing python software properties..."
sudo aptitude install -y python-software-properties

bootstrap_echo "Installing other useful libraries..."
sudo aptitude install -y zlib1g-dev libssl-dev libreadline-dev libyaml-dev libsqlite3-dev libxml2-dev libxslt1-dev libcurl4-openssl-dev libffi-dev libcurl4-gnutls-dev libexpat1-dev gettext unzip

# http://sourcedigit.com/21550-git-2-11-released-how-to-install-git-on-ubuntu-16-10/
bootstrap_echo "Installing git..."
sudo add-apt-repository -y ppa:git-core/ppa
sudo aptitude update
sudo aptitude install -y git

bootstrap_echo "Installing ctags..."
sudo aptitude install -y exuberant-ctags

bootstrap_echo "Installing Vim ..."
sudo aptitude remove vim-tiny -y
sudo aptitude install -y vim-gtk

bootstrap_echo "Installing htop..."
sudo aptitude install -y htop

bootstrap_echo "Installing tree..."
sudo aptitude install -y tree

bootstrap_echo "Installing ImageMagick..."
sudo aptitude install -y imagemagick

bootstrap_echo "Installing zsh..."
sudo aptitude install -y zsh

bootstrap_echo "Installing xclip..."
sudo aptitude install -y xclip

bootstrap_echo "Installing bat..."
sudo apt install bat

if grep -qiE 'precise|saucy|trusty|utopic|vivid|wheezy' /etc/os-release; then
  bootstrap_echo "Installing gnome-tweak-tool..."
  sudo aptitude install -y gnome-tweak-tool
fi

bootstrap_echo "Installing node via NVM..."
# shellcheck source=/dev/null
export NVM_DIR="$HOME"/.nvm && (
  git clone https://github.com/creationix/nvm.git "$NVM_DIR"
  cd "$NVM_DIR"
  git checkout "$(git describe --abbrev=0 --tags --match "v[0-9]*" origin)"
) && . "$NVM_DIR"/nvm.sh

nvm install --lts

bootstrap_echo "Cloning linux-bootstrap repo..."
git clone "$BOOTSTRAP_REPO_URL" -b "$BOOTSTRAP_BRANCH" "$BOOTSTRAP_DIR"
bootstrap_echo "Done!"


bootstrap_echo "Installing oh-my-zsh..."
git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
bootstrap_echo "Done!"


bootstrap_echo "Installing power10k theme."
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
bootstrap_echo "Changing your shell to zsh ..."
chsh -s "$(which zsh)"
bootstrap_echo "Done!"


bootstrap_echo "Installing dotfiles..."
if [[ -d $DOTFILES_DIR ]]; then
  bootstrap_echo "Backing up old dotfiles to $HOME/old_dotfiles_backup..."
  rm -rf "$OLD_DOTFILES_BACKUP"
  cp -R "$DOTFILES_DIR" "$OLD_DOTFILES_BACKUP"
  rm -rf "$DOTFILES_DIR"
fi
bootstrap_echo "Done!"

bootstrap_echo "Cloning your dotfiles repo to ${DOTFILES_DIR} ..."
git clone "$DOTFILES_REPO_URL" -b "$DOTFILES_BRANCH" "$DOTFILES_DIR"
# shellcheck source=/dev/null
source "$DOTFILES_DIR"/install.sh
bootstrap_echo "Done!"


bootstrap_echo "Installing bin utilities..."
if [ ! -d "$HOME"/bin ]; then
  mkdir "$HOME"/bin
fi
cp -R "$BOOTSTRAP_DIR"/bin/* "$HOME"/bin/
bootstrap_echo "Done!"


bootstrap_echo "Installing FiraCode-Font"
sudo add-apt-repository universe
sudo apt install fonts-firacode
bootstrap_echo "Done!"



bootstrap_echo "Installing Vundle and Vim plugins..."
if [ -d "$HOME"/.vim/bundle ]; then
  rm -rf "$HOME"/.vim/bundle
fi
git clone https://github.com/gmarik/Vundle.vim.git "$HOME/.vim/bundle/Vundle.vim"
cp -R "$DOTFILES_DIR"/vim/colors "$HOME"/.vim # So Vim won't complain about solarized not being found.
vim +PluginInstall +qall
rm -rf "$HOME"/.vim/colors
bootstrap_echo "Done!"


bootstrap_echo "Install VS Code"
sudo apt-get install wget gpg
wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
rm -f packages.microsoft.gpg
sudo apt install apt-transport-https
sudo apt update
sudo apt install code # or code-insiders
bootstrap_echo "Done!"


bootstrap_echo "Install IntelliJ"
sudo snap install intellij-idea-community --classic
bootstrap_echo "Done!"


bootstrap_echo "Install Google Chrome"
wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
sudo dpkg -i google-chrome-stable_current_amd64.deb
bootstrap_echo "Done!"


bootstrap_echo "Install Docker"
sudo snap install docker
bootstrap_echo "Done!"


bootstrap_echo "Install Filezilla"
sudo apt install software-properties-common apt-transport-https -y
sudo apt install filezilla
bootstrap_echo "Done!"

bootstrap_echo "Install Spotify"
sudo snap install spotify
bootstrap_echo "Done!"


echo ""
echo "******************************************************************"
echo "**** Bootstrap script complete! Please restart your computer. ****"
echo "******************************************************************"
echo ""
